//Introduction to promises.
function getDataWithPromise(id, getnextdata){
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      console.log("data id is : " + id);
      resolve("success");
      // reject("error");
      if(getnextdata){
        getnextdata();
      }
    }, 2000);
  });
}

// Introduction to promise chains
const getPromise = () => {
  return new Promise((resolve, reject) => {
    console.log("promise function called");
    resolve("success");
  });
}

let promise = getPromise();
promise.then((result) => {
  console.log("promise fulfilled" + result);
});
promise.catch((error) => {
  console.log("promise was not fullfilled" + error);
});


//example for promise chaining

function getData(id){
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      console.log("data id = " + id);
      resolve("id genetared successfully");
    }, 2000);
  });
}

//promise chaining
getData(1).then((res) => {
  console.log(res);
  getData(2).then((res) => {
    console.log(res);
    getData(3).then((res) => {
      console.log(res);
    })
  });
});

//better way of writing the above code
getData(1)
  .then((res) => {
    return getData(2);
  })
  .then((res) => {
    return getData(3);
  })
  .then((res) => {
    console.log(res);
  }
);


